{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://aidm.dev/schemas/power_system_schema.json",
  "title": "AIDM Power System Schema",
  "description": "Magical/power frameworks: rules, limitations, cross-world harmonization",
  "type": "object",
  "required": ["schema_version", "system_id", "system_name", "source", "core_mechanics", "limitations", "metadata"],
  "properties": {
    "schema_version": { "type": "string", "description": "Schema version", "pattern": "^\\d+\\.\\d+\\.\\d+$", "default": "2.0.0" },
    "system_id": { "type": "string", "description": "Unique ID", "pattern": "^power_[a-z0-9_]+$" },
    "system_name": { "type": "string", "description": "Display name (e.g., Chakra, Magic Circuits, Nen)" },
    "source": {
      "type": "object",
      "description": "Power system origin",
      "required": ["type"],
      "properties": {
        "type": { "type": "string", "enum": ["anime", "original", "hybrid"], "description": "From anime/AIDM-created/fusion" },
        "anime_name": { "type": "string" },
        "anime_genre": { "type": "array", "items": { "type": "string", "enum": ["shonen", "seinen", "isekai", "mecha", "slice_of_life", "sports", "other"] } },
        "canon_accuracy": { "type": "string", "enum": ["exact", "high", "moderate", "low", "creative_interpretation"], "description": "Faithfulness to source" },
        "fusion_components": { "type": "array", "description": "If hybrid, which systems combined", "items": { "type": "string" } }
      }
    },
    "core_mechanics": {
      "type": "object",
      "description": "How system functions",
      "required": ["power_source", "activation_method"],
      "properties": {
        "power_source": {
          "type": "object",
          "required": ["origin"],
          "properties": {
            "origin": { "type": "string", "enum": ["innate", "learned", "inherited", "bestowed", "environmental", "spiritual", "technological", "divine", "demonic", "cosmic"] },
            "description": { "type": "string" },
            "universally_accessible": { "type": "boolean", "description": "Can anyone learn, or restricted" },
            "access_requirements": { "type": "array", "items": { "type": "string" } }
          }
        },
        "activation_method": {
          "type": "object",
          "properties": {
            "mental_component": { "type": "string", "description": "e.g., focus, visualization, emotion" },
            "physical_component": { "type": "string", "description": "e.g., hand signs, movements, postures" },
            "verbal_component": { "type": "string", "description": "e.g., chants, incantations, keywords" },
            "material_component": { "type": "string", "description": "e.g., catalysts, weapons, reagents" },
            "training_time": { "type": "string", "enum": ["instant", "hours", "days", "weeks", "months", "years", "decades"], "description": "Time to basic competence" }
          }
        },
        "resource_system": {
          "type": "object",
          "description": "Energy/stamina/mana costs",
          "properties": {
            "resource_name": { "type": "string", "description": "e.g., Mana, Ki, Chakra, Stamina" },
            "resource_pool": { "type": "string", "enum": ["HP", "MP", "SP", "custom"] },
            "custom_resource": { "type": "string", "description": "If custom, define it" },
            "regeneration": {
              "type": "object",
              "properties": {
                "rate": { "type": "string" },
                "method": { "type": "string", "description": "e.g., rest, meditation, consumption" },
                "restrictions": { "type": "array", "description": "When regen can't occur", "items": { "type": "string" } }
              }
            },
            "depletion_consequences": { "type": "string", "description": "What happens at zero" }
          }
        },
        "power_scaling": {
          "type": "object",
          "properties": {
            "measurement_system": { "type": "string", "description": "e.g., levels, tiers, ranks" },
            "progression_method": { "type": "string", "enum": ["training", "combat_experience", "age", "enlightenment", "consumption", "inheritance", "fixed"] },
            "power_ceiling": { "type": "string", "description": "Max potential & determinants" },
            "breakthrough_mechanics": { "type": "string", "description": "How to surpass limits (if possible)" }
          }
        },
        "ability_categories": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["category", "examples"],
            "properties": {
              "category": { "type": "string", "description": "e.g., elemental, enhancement, healing" },
              "examples": { "type": "array", "items": { "type": "string" } },
              "difficulty": { "type": "string", "enum": ["basic", "intermediate", "advanced", "master", "legendary"] },
              "rarity": { "type": "string", "enum": ["common", "uncommon", "rare", "very_rare", "unique"] }
            }
          }
        }
      }
    },
    "limitations": {
      "type": "object",
      "description": "Restrictions & weaknesses",
      "required": ["hard_limits"],
      "properties": {
        "hard_limits": { "type": "array", "description": "Absolute restrictions (cannot overcome)", "items": { "type": "string" }, "minItems": 1 },
        "soft_limits": {
          "type": "array",
          "description": "Overcome via training/items/conditions",
          "items": {
            "type": "object",
            "properties": {
              "limitation": { "type": "string" },
              "workaround": { "type": "string" }
            }
          }
        },
        "weaknesses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "weakness": { "type": "string" },
              "severity": { "type": "string", "enum": ["minor", "moderate", "major", "critical"] },
              "mitigation": { "type": "string", "description": "How to reduce (if possible)" }
            }
          }
        },
        "forbidden_applications": { "type": "array", "description": "Explicitly cannot do", "items": { "type": "string" } },
        "cost_and_risk": {
          "type": "object",
          "properties": {
            "overuse_consequences": { "type": "array", "items": { "type": "string" } },
            "failure_consequences": { "type": "array", "items": { "type": "string" } },
            "corruption_risk": { "type": "string", "description": "Whether/how power corrupts" }
          }
        }
      }
    },
    "interaction_rules": {
      "type": "object",
      "description": "Interaction with other systems",
      "properties": {
        "compatible_systems": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "system_id": { "type": "string" },
              "synergy_type": { "type": "string", "enum": ["enhances", "combines", "complements", "neutral"] },
              "synergy_description": { "type": "string" }
            }
          }
        },
        "incompatible_systems": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "system_id": { "type": "string" },
              "conflict_type": { "type": "string", "enum": ["cancels", "weakens", "corrupts", "incompatible"] },
              "conflict_description": { "type": "string" }
            }
          }
        },
        "hybrid_potential": {
          "type": "object",
          "properties": {
            "hybridization_possible": { "type": "boolean", "description": "Can mix with other systems" },
            "hybridization_difficulty": { "type": "string", "enum": ["trivial", "easy", "moderate", "difficult", "nearly_impossible"] },
            "hybrid_examples": { "type": "array", "items": { "type": "string" } }
          }
        },
        "power_hierarchy": { "type": "string", "description": "Rank among in-world systems (cosmology)" }
      }
    },
    "world_integration": {
      "type": "object",
      "properties": {
        "geographic_distribution": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "location": { "type": "string" },
              "prevalence": { "type": "string", "enum": ["ubiquitous", "common", "uncommon", "rare", "unique"] }
            }
          }
        },
        "social_implications": {
          "type": "object",
          "properties": {
            "public_perception": { "type": "string", "enum": ["revered", "respected", "accepted", "feared", "outlawed", "unknown"] },
            "legal_status": { "type": "string", "enum": ["unrestricted", "regulated", "licensed", "restricted", "forbidden"] },
            "social_impact": { "type": "string", "description": "Effect on society structure" }
          }
        },
        "historical_context": {
          "type": "object",
          "properties": {
            "origin_story": { "type": "string", "description": "How power came to exist in-world" },
            "major_events": { "type": "array", "items": { "type": "string" } },
            "legendary_users": { "type": "array", "items": { "type": "string" } }
          }
        },
        "teaching_institutions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": { "type": "string" },
              "location": { "type": "string" },
              "admission_requirements": { "type": "string" },
              "specialization": { "type": "string" }
            }
          }
        }
      }
    },
    "player_interaction": {
      "type": "object",
      "properties": {
        "can_player_learn": { "type": "boolean", "description": "Can PC acquire this power" },
        "learning_requirements": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "requirement_type": { "type": "string", "enum": ["attribute", "quest", "item", "trainer", "time", "location", "event"] },
              "requirement_description": { "type": "string" },
              "optional": { "type": "boolean", "description": "Can bypass this" }
            }
          }
        },
        "integration_with_mechanics": {
          "type": "object",
          "properties": {
            "skill_category": { "type": "string", "enum": ["physical", "magical", "psionic", "hybrid", "unique"] },
            "attribute_dependencies": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "attribute": { "type": "string", "description": "e.g., INT, WIS, custom" },
                  "impact": { "type": "string" }
                }
              }
            },
            "progression_curve": { "type": "string", "description": "e.g., linear, exponential, tiered" }
          }
        }
      }
    },
    "aidm_directives": {
      "type": "object",
      "description": "AIDM usage instructions",
      "properties": {
        "enforcement_strictness": { "type": "string", "enum": ["absolute", "strict", "moderate", "flexible", "narrative_driven"], "description": "How rigidly enforce rules" },
        "balance_priority": { "type": "string", "enum": ["canon_accuracy", "game_balance", "player_fun", "narrative_impact"], "description": "What matters most in conflicts" },
        "auto_explain": { "type": "boolean", "description": "Explain mechanics when first encountered", "default": true },
        "research_required": { "type": "boolean", "description": "Must verify anime source before using", "default": false },
        "common_mistakes": { "type": "array", "description": "Errors to avoid", "items": { "type": "string" } },
        "narrative_hooks": { "type": "array", "description": "Story opportunities this creates", "items": { "type": "string" } }
      }
    },
    "metadata": {
      "type": "object",
      "required": ["version"],
      "properties": {
        "version": { "type": "string", "pattern": "^\\d+\\.\\d+\\.\\d+$" },
        "created_date": { "type": "string", "format": "date-time" },
        "last_modified": { "type": "string", "format": "date-time" },
        "created_by": { "type": "string", "description": "e.g., AIDM team, player" },
        "playtest_status": { "type": "string", "enum": ["untested", "alpha", "beta", "stable", "deprecated"] },
        "balance_notes": { "type": "string" },
        "design_philosophy": { "type": "string" },
        "tags": { "type": "array", "items": { "type": "string" } }
      }
    }
  }
}
